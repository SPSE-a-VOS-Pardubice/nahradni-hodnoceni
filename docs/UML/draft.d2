Database: {
  shape: class

  "execute(string $query, array $params = [])": void
  "fetchSingle(string $query, array $params = [])": array
  "fetchMultiple(string $query, array $params = [])": array

  "lastInsertId(?string $name = null)": mixed
}

DatabaseEntity -- Database: {
  source-arrowhead: *
  target-arrowhead: 1
}
DatabaseEntity: *DatabaseEntity* {
  shape: class

  \#database: Database
  \#properties: array<string, mixed>
  "__construct(Database $database)"
  "__set(string $name, $value)": void
  "__get(string $name)": mixed
  "abstract static getProperties()": array<DatabaseEntityProperty>
  "#setProperty(string $key, $value)": void
  "#getProperty(string $key)": mixed
  "abstract write()": void
  "abstract remove()": void
  "abstract static getTableName()": string
}

DatabaseEntityProperty -- DatabaseEntity: {
  source-arrowhead: *
  target-arrowhead: 1
}
DatabaseEntityProperty: {
  shape: class

  name: string
  displayName: ?string
  type: PropertyType
  selectOptionsSource: null \| array \| string
  isNullable: bool
  defaultValue: mixed
}

DatabaseEntityPropertyType -- DatabaseEntityProperty: {
  source-arrowhead: 1
  target-arrowhead: 1
}
DatabaseEntityPropertyType: {
  shape: class
}

FullDatabaseEntity -> DatabaseEntity
FullDatabaseEntity: *FullDatabaseEntity* {
  shape: class

  \#id: int
  "static get(int $id)": mixed
  "write()": void
  "remove()": void

  "#static fromDatabase(Database $database, array $row)": FullDatabaseEntity
  "static updateData(Database $database, array $row)": void
  "static getAvailableOptions(Database $database)": array
  "getSelectedOptions()": array
}

Models.Classroom -> FullDatabaseEntity
Models.Exam -> FullDatabaseEntity
Models.Teacher -> FullDatabaseEntity
Models: {
  Classroom: {
    shape: class

    "static getProperties()": array<DatabaseEntityProperty>
  }

  Exam: {
    shape: class

    "static getProperties()": array<DatabaseEntityProperty>
  }

  Teacher: {
    shape: class

    "static getProperties()": array<DatabaseEntityProperty>
  }
}

IntermediateDatabaseEntity -> DatabaseEntity
IntermediateDatabaseEntity: *IntermediateDatabaseEntity* {
  shape: class

  "write()": void
  "remove()": void
}

Models.ClassroomTrait -> IntermediateDatabaseEntity
Models: {
  ClassroomTrait: {
    shape: class

    "static getProperties()": array<DatabaseEntityProperty>
  }
}
